{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/application.component.ts","./src/app/components/application.component.html","./src/app/components/characters/character-form/character-form.component.ts","./src/app/components/characters/character-form/character-form.component.html","./src/app/components/characters/character-list-item/character-list-item.component.ts","./src/app/components/characters/character-list-item/character-list-item.component.html","./src/app/components/characters/characters.component.ts","./src/app/components/characters/characters.component.html","./src/app/components/header/header.component.ts","./src/app/components/header/header.component.html","./src/app/components/home/character-tasks/character-task-list/character-task-list-item/character-task-list-item.component.ts","./src/app/components/home/character-tasks/character-task-list/character-task-list-item/character-task-list-item.component.html","./src/app/components/home/character-tasks/character-task-list/character-task-list.component.ts","./src/app/components/home/character-tasks/character-task-list/character-task-list.component.html","./src/app/components/home/character-tasks/character-tasks.component.ts","./src/app/components/home/character-tasks/character-tasks.component.html","./src/app/components/home/home.component.ts","./src/app/components/home/home.component.html","./src/app/components/loader/loader.component.ts","./src/app/components/loader/loader.component.html","./src/app/components/login/login.component.ts","./src/app/components/login/login.component.html","./src/app/components/modal/modal.component.ts","./src/app/components/modal/modal.component.html","./src/app/components/tasks/task-form/task-form.component.ts","./src/app/components/tasks/task-form/task-form.component.html","./src/app/components/tasks/task-list-item/task-list-item.component.ts","./src/app/components/tasks/task-list-item/task-list-item.component.html","./src/app/components/tasks/tasks.component.ts","./src/app/components/tasks/tasks.component.html","./src/app/components/toast/toast.component.ts","./src/app/components/toast/toast.component.html","./src/app/enums/task-repeats.enum.ts","./src/app/enums/task-type.enum.ts","./src/app/guards/authentication.guard.ts","./src/app/models/AuthError.ts","./src/app/models/Character.ts","./src/app/models/Task.ts","./src/app/pipes/enum-to-array/enum-to-array.pipe.ts","./src/app/pipes/filter/filter.pipe.ts","./src/app/pipes/sort/sort.pipe.ts","./src/app/services/auth/auth.service.ts","./src/app/services/character/character.service.ts","./src/app/services/error-handler/error-handler.service.ts","./src/app/services/fetch/fetch.service.ts","./src/app/services/modal/modal.service.ts","./src/app/services/task/task.service.ts","./src/app/services/toast/toast.service.ts","./src/app/state/characters/character.actions.ts","./src/app/state/characters/character.effects.ts","./src/app/state/characters/character.reducer.ts","./src/app/state/characters/character.selector.ts","./src/app/state/completedTasks/completed-task.actions.ts","./src/app/state/completedTasks/completed-task.reducer.ts","./src/app/state/completedTasks/completed-task.selector.ts","./src/app/state/completedTasks/completed-tasks.effects.ts","./src/app/state/tasks/task.actions.ts","./src/app/state/tasks/task.effects.ts","./src/app/state/tasks/task.reducer.ts","./src/app/state/tasks/task.selector.ts","./src/app/submodules/app.routing.module.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { User } from './models/User';\r\nimport { AuthService } from './services/auth/auth.service';\r\nimport { loadCharacters } from './state/characters/character.actions';\r\nimport { loadCompletedTasks } from './state/completedTasks/completed-task.actions';\r\nimport { loadTasks } from './state/tasks/task.actions';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent implements OnInit{\r\n  title = 'maple-check';\r\n\r\n  authenticatedUser: User;\r\n\r\n  constructor(private authService: AuthService, private store: Store) { }\r\n  \r\n  ngOnInit(): void {\r\n    this.authenticatedUser = this.authService.authenticatedUser;\r\n    this.authService.authenticatedUserChanged.subscribe(user => this.authenticatedUser = user);\r\n\r\n    this.store.dispatch(loadCharacters());\r\n    this.store.dispatch(loadCompletedTasks());\r\n    this.store.dispatch(loadTasks());\r\n  }\r\n}\r\n","<app-toast aria-live=\"polite\" aria-atomic=\"true\"></app-toast>\r\n<app-modal></app-modal>\r\n<router-outlet></router-outlet>\r\n\r\n<app-loader *ngIf=\"!authenticatedUser\" [size]=\"'150px'\"></app-loader>","import { ErrorHandler, NgModule } from '@angular/core';\r\n\r\n//Imports\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgxBootstrapIconsModule, allIcons } from 'ngx-bootstrap-icons';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { AppRoutingModule } from './submodules/app.routing.module';\r\nimport { StoreModule } from '@ngrx/store';\r\n\r\n//Providers\r\nimport { CookieService } from 'ngx-cookie-service';\r\nimport { AuthService } from './services/auth/auth.service';\r\nimport { ToastService } from './services/toast/toast.service';\r\n\r\n//Declarations\r\nimport { AppComponent } from './app.component';\r\nimport { HeaderComponent } from './components/header/header.component';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { HomeComponent } from './components/home/home.component';\r\nimport { ApplicationComponent } from './components/application.component';\r\nimport { ModalComponent } from './components/modal/modal.component';\r\nimport { ErrorHandlerService } from './services/error-handler/error-handler.service';\r\nimport { ToastComponent } from './components/toast/toast.component';\r\nimport { TasksComponent } from './components/tasks/tasks.component';\r\nimport { TaskFormComponent } from './components/tasks/task-form/task-form.component';\r\nimport { EnumToArrayPipe } from './pipes/enum-to-array/enum-to-array.pipe';\r\nimport { CharactersComponent } from './components/characters/characters.component';\r\nimport { LoaderComponent } from './components/loader/loader.component';\r\nimport { CharacterFormComponent } from './components/characters/character-form/character-form.component';\r\nimport { CharacterTasksComponent } from './components/home/character-tasks/character-tasks.component';\r\nimport { FilterPipe } from './pipes/filter/filter.pipe';\r\nimport { CharacterTaskListComponent } from './components/home/character-tasks/character-task-list/character-task-list.component';\r\nimport { CharacterListItemComponent } from './components/characters/character-list-item/character-list-item.component';\r\nimport { TaskListItemComponent } from './components/tasks/task-list-item/task-list-item.component';\r\nimport { CharacterTaskListItemComponent } from './components/home/character-tasks/character-task-list/character-task-list-item/character-task-list-item.component';\r\nimport { SortPipe } from './pipes/sort/sort.pipe';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { characterReducer } from './state/characters/character.reducer';\r\nimport { CharacterEffects } from './state/characters/character.effects';\r\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\r\nimport { environment } from '../environments/environment';\r\nimport { CompletedTaskEffects } from './state/completedTasks/completed-tasks.effects';\r\nimport { completedTaskReducer } from './state/completedTasks/completed-task.reducer';\r\nimport { taskReducer } from './state/tasks/task.reducer';\r\nimport { TaskEffects } from './state/tasks/task.effects';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    HeaderComponent,\r\n    LoginComponent,\r\n    HomeComponent,\r\n    ApplicationComponent,\r\n    ModalComponent,\r\n    ToastComponent,\r\n    TasksComponent,\r\n    TaskFormComponent,\r\n    EnumToArrayPipe,\r\n    CharactersComponent,\r\n    LoaderComponent,\r\n    CharacterFormComponent,\r\n    CharacterTasksComponent,\r\n    FilterPipe,\r\n    CharacterTaskListComponent,\r\n    CharacterTaskListItemComponent,\r\n    CharacterListItemComponent,\r\n    TaskListItemComponent,\r\n    SortPipe\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    NgbModule,\r\n    AppRoutingModule,\r\n    FormsModule,\r\n    NgxBootstrapIconsModule.pick(allIcons),\r\n    StoreModule.forRoot({\r\n      characters: characterReducer,\r\n      completedTasks: completedTaskReducer,\r\n      tasks: taskReducer\r\n    }, {}),\r\n    EffectsModule.forRoot([\r\n      CharacterEffects,\r\n      CompletedTaskEffects,\r\n      TaskEffects\r\n    ]),\r\n    StoreDevtoolsModule.instrument({ maxAge: 25, logOnly: environment.production }),\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: ErrorHandler,\r\n      useClass: ErrorHandlerService\r\n    },\r\n    CookieService,\r\n    AuthService,\r\n    ToastService\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-application',\r\n  templateUrl: './application.component.html',\r\n  styleUrls: ['./application.component.scss']\r\n})\r\nexport class ApplicationComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<app-header></app-header>\r\n<router-outlet></router-outlet>\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { Character } from 'src/app/models/Character';\r\nimport { CharacterService } from 'src/app/services/character/character.service';\r\nimport { addCharacter, updateCharacter } from 'src/app/state/characters/character.actions';\r\nimport { selectCharacter } from 'src/app/state/characters/character.selector';\r\n\r\n@Component({\r\n  selector: 'app-character-form',\r\n  templateUrl: './character-form.component.html',\r\n  styleUrls: ['./character-form.component.scss']\r\n})\r\nexport class CharacterFormComponent implements OnInit {\r\n\r\n  public character: Character;\r\n\r\n  editCharacter$: Observable<Character>;\r\n\r\n  constructor(private activatedRoute: ActivatedRoute, private router: Router, private store: Store) { }\r\n\r\n  ngOnInit(): void {\r\n\r\n    this.activatedRoute.params.subscribe(params => {\r\n      let id = params[\"id\"];\r\n      if(id){\r\n        console.log(\"We editin\")\r\n        this.editCharacter$ = this.store.select(selectCharacter(id));\r\n        this.editCharacter$.subscribe(char => this.character = { ...char });\r\n      }\r\n      else {\r\n        console.log(\"We creatin\")\r\n        this.character = new Character();\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  async save() {\r\n    if (this.character._id) {\r\n      this.store.dispatch(updateCharacter({ character: this.character }));\r\n    }\r\n    else {\r\n      this.store.dispatch(addCharacter({ character: this.character }));\r\n    }\r\n\r\n    this.router.navigate([\"characters\"]);\r\n  }\r\n}\r\n","<div class=\"container\" *ngIf=\"character; else loader\">\r\n    <form #classForm=\"ngForm\" (ngSubmit)=\"save()\">\r\n        <div class=\"form-group\">\r\n            <label for=\"name\">Name</label>\r\n            <input type=\"text\" class=\"form-control\" id=\"name\" name=\"name\" placeholder=\"Character name\"\r\n                [(ngModel)]=\"character.name\" required />\r\n        </div>\r\n\r\n        <div class=\"float-right\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" routerLink=\"/characters\">Cancel</button>\r\n            <button type=\"submit\" class=\"btn btn-success ml-2\" [disabled]=\"classForm.form.invalid\">Save</button>\r\n        </div>\r\n    </form>\r\n</div>\r\n<ng-template #loader>\r\n    <app-loader [size]=\"'150px'\"></app-loader>\r\n</ng-template>","import { Component, Input, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Character } from 'src/app/models/Character';\r\nimport { deleteCharacter } from 'src/app/state/characters/character.actions';\r\n\r\n@Component({\r\n  selector: '[app-character-list-item]',\r\n  templateUrl: './character-list-item.component.html',\r\n  styleUrls: ['./character-list-item.component.scss']\r\n})\r\nexport class CharacterListItemComponent implements OnInit {\r\n\r\n  @Input() character: Character;\r\n\r\n  constructor(private store: Store) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  async delete(characterId) {\r\n    this.store.dispatch(deleteCharacter({id: characterId}));\r\n  }\r\n}\r\n","<td>\r\n    {{ character.name }}\r\n</td>\r\n<td>\r\n        <a [routerLink]=\"['edit',character._id]\">Edit</a> |\r\n        <a class=\"text-danger\" role=\"button\" (click)=\"delete(character._id)\">Delete</a>\r\n</td>","import { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { Character } from 'src/app/models/Character';\r\nimport { selectCharacterStateStatus, selectAllCharacters } from 'src/app/state/characters/character.selector';\r\n\r\n@Component({\r\n  selector: 'app-characters',\r\n  templateUrl: './characters.component.html',\r\n  styleUrls: ['./characters.component.scss']\r\n})\r\nexport class CharactersComponent implements OnInit {\r\n\r\n  characters$: Observable<Character[]> = this.store.select(selectAllCharacters);\r\n  charactersStatus$: Observable<String> = this.store.select(selectCharacterStateStatus);\r\n\r\n  constructor(private store: Store) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  \r\n}\r\n","<div class=\"container\">\r\n\r\n    <button class=\"btn btn-primary bottom-right-floating-button\" routerLink=\"new\">New character</button>\r\n\r\n    <div class=\"d-flex mb-3\">\r\n        <h2>Characters</h2>\r\n    </div>\r\n\r\n\r\n    <table *ngIf=\"(charactersStatus$ | async) == 'success'; else loader\" class=\"table table-striped\">\r\n        <thead>\r\n            <tr>\r\n                <th>\r\n                    Name\r\n                </th>\r\n                <th>\r\n                    Actions\r\n                </th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr app-character-list-item *ngFor=\"let char of characters$ | async\" [character]=\"char\"> </tr>\r\n        </tbody>\r\n    </table>\r\n\r\n    <ng-template #loader>\r\n        <app-loader [size]=\"'150px'\"></app-loader>\r\n    </ng-template>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AuthService } from 'src/app/services/auth/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.scss']\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n\r\n  constructor(private authService: AuthService, public router: Router) { }\r\n\r\n  public Username: String;\r\n\r\n  public ServerTime: string;\r\n\r\n  ngOnInit(): void {\r\n    this.Username = this.authService.authenticatedUser.name;\r\n  }\r\n\r\n  logout() {\r\n    this.authService.logout();\r\n  }\r\n}\r\n","<nav class=\"navbar navbar-expand-lg navbar-dark bg-primary sticky-top\">\r\n    <div>\r\n        <ul ngbNav [activeId]=\"router.url\" class=\"navbar-nav\">\r\n            <li ngbNavItem [ngbNavItem]=\"'/home'\" class=\"nav-item\">\r\n                <a ngbNavLink routerLink=\"home\" class=\"navbar-brand\">Maple Check</a>\r\n            </li>\r\n            <li ngbNavItem [ngbNavItem]=\"'/characters'\" class=\"nav-item\">\r\n                <a ngbNavLink routerLink=\"characters\" class=\"nav-link\">Characters</a>\r\n            </li>\r\n            <li ngbNavItem [ngbNavItem]=\"'/tasks'\" class=\"nav-item\">\r\n                <a ngbNavLink routerLink=\"tasks\" class=\"nav-link\">Tasks</a>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n    <div class=\"ml-auto\">\r\n        <ul class=\"navbar-nav\">\r\n            <li ngbDropdown class=\"nav-item dropdown\">\r\n                <a class=\"nav-link dropdown-toggle\" role=\"button\" ngbDropdownToggle\r\n                    data-toggle=\"dropdown\">{{Username}}</a>\r\n\r\n                <div ngbDropdownMenu class=\"dropdown-menu dropdown-menu-right\">\r\n                    <a ngbDropdownItem role=\"button\" class=\"dropdown-item\" (click)=\"logout()\">Logout</a>\r\n                </div>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n</nav>","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Character } from 'src/app/models/Character';\r\nimport { Task } from 'src/app/models/Task';\r\nimport { hideTask } from 'src/app/state/characters/character.actions';\r\nimport { setComplete, setIncomplete } from 'src/app/state/completedTasks/completed-task.actions';\r\n\r\n@Component({\r\n  selector: '[app-character-task-list-item]',\r\n  templateUrl: './character-task-list-item.component.html',\r\n  styleUrls: ['./character-task-list-item.component.scss']\r\n})\r\nexport class CharacterTaskListItemComponent implements OnInit {\r\n\r\n  @Input() task: Task;\r\n  @Input() character: Character;\r\n  @Input() editMode: Boolean;\r\n\r\n  constructor(private store: Store) { }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  async toggleComplete() {\r\n\r\n    if (this.task.complete) {\r\n      this.store.dispatch(setIncomplete({ characterId: this.character._id, taskId: this.task._id }));\r\n    }\r\n    else {\r\n      this.store.dispatch(setComplete({ characterId: this.character._id, taskId: this.task._id }));\r\n    }\r\n  }\r\n\r\n  toggleHiddenState() {\r\n    \r\n    this.store.dispatch(hideTask({ characterId: this.character._id, taskId: this.task._id, hidden: !this.task.hidden }))\r\n\r\n  }\r\n\r\n}\r\n","<div *ngIf=\"!editMode\" class=\"overlay\" (click)=\"toggleComplete()\"></div>\r\n\r\n<td class=\"task-image-td\"><img class=\"task-image\" src=\"{{task.image}}\" /> </td>\r\n<td> {{ task.name }} </td>\r\n\r\n<td *ngIf=\"!editMode\" class=\"checkbox-td\">\r\n    <input *ngIf=\"!saving\" type=\"checkbox\" class=\"\" [checked]=\"task.complete\" />\r\n    <app-loader *ngIf=\"saving\" [size]=\"'25px'\"></app-loader>\r\n</td>\r\n\r\n<td *ngIf=\"editMode\" class=\"text-right p-1\">\r\n    <a class=\"btn btn-light\" role=\"button\" (click)=\"toggleHiddenState()\">\r\n        <i-bs class=\"text-danger\" *ngIf=\"task.hidden\" name=\"eye-slash-fill\"></i-bs>\r\n        <i-bs *ngIf=\"!task.hidden\" name=\"eye-fill\"></i-bs>\r\n    </a>\r\n</td>","import { Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport * as arrayMove from 'array-move';\r\nimport { Observable } from 'rxjs';\r\nimport { Character } from 'src/app/models/Character';\r\nimport { Task } from 'src/app/models/Task';\r\nimport { updateTaskPriorities } from 'src/app/state/characters/character.actions';\r\nimport { selectCompletedTaskStateStatus } from 'src/app/state/completedTasks/completed-task.selector';\r\nimport { selectCharacterTasks, selectTaskStateStatus } from 'src/app/state/tasks/task.selector';\r\n\r\n@Component({\r\n  selector: 'app-character-task-list',\r\n  templateUrl: './character-task-list.component.html',\r\n  styleUrls: ['./character-task-list.component.scss']\r\n})\r\nexport class CharacterTaskListComponent implements OnChanges {\r\n\r\n  @Input() character: Character;\r\n  @Input() label: String;\r\n\r\n  @Input() type: String;\r\n  @Input() repeats: String;\r\n\r\n  tasks$: Observable<Task[]>;\r\n  tasks: Task[];\r\n\r\n  taskStateStatus$: Observable<String> = this.store.select(selectTaskStateStatus);\r\n  completedTaskStateStatus$: Observable<String> = this.store.select(selectCompletedTaskStateStatus);\r\n\r\n  editMode: Boolean;\r\n  isCollapsed: boolean = false;\r\n\r\n  constructor(private store: Store) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.tasks$ = this.store.select(selectCharacterTasks(this.character._id, this.type, this.repeats))\r\n    this.tasks$.subscribe(tasks => this.tasks = tasks);\r\n  }\r\n\r\n  async toggleEditMode() {\r\n    \r\n    if(this.editMode)\r\n      this.store.dispatch(updateTaskPriorities({ characterId: this.character._id, tasks: this.tasks }))\r\n    \r\n    this.editMode = !this.editMode;\r\n  }\r\n\r\n  draggingIndex: number;\r\n  onDragStart(fromIndex: number): void {\r\n    this.draggingIndex = fromIndex;\r\n  }\r\n\r\n  onDragEnter(toIndex: number): void {\r\n    if (this.draggingIndex !== toIndex) {\r\n      this.tasks = arrayMove(this.tasks, this.draggingIndex, toIndex);\r\n      this.draggingIndex = toIndex;\r\n    }\r\n  }\r\n\r\n  onDragEnd(): void {\r\n    this.draggingIndex = undefined;\r\n  }\r\n}\r\n","<div class=\"card mt-4\">\r\n    <div class=\"card-body p-2\">\r\n        <div>\r\n            <label role=\"button\" class=\"m-2\" (click)=\"collapse.toggle()\">\r\n                <b class=\"mr-1\">{{ label }}</b>\r\n                <i-bs *ngIf=\"isCollapsed\" name=\"chevron-down\"></i-bs>\r\n                <i-bs *ngIf=\"!isCollapsed\" name=\"chevron-up\"></i-bs>\r\n            </label>\r\n            <div class=\"float-right\">\r\n\r\n                <a class=\"btn btn-light\" role=\"button\" *ngIf=\"!isCollapsed\" (click)=\"toggleEditMode()\">\r\n                    <i-bs *ngIf=\"!editMode && !saving\" name=\"pencil-square\"></i-bs>\r\n                    <i-bs *ngIf=\"editMode && !saving\" class=\"text-success\" name=\"check-circle-fill\"></i-bs>\r\n                    <app-loader [size]=\"'25px'\" *ngIf=\"saving\"></app-loader>\r\n                </a>\r\n            </div>\r\n        </div>\r\n        <div #collapse=\"ngbCollapse\" [(ngbCollapse)]=\"isCollapsed\">\r\n            <hr>\r\n            <div *ngIf=\"(taskStateStatus$ | async) == 'success' && (completedTaskStateStatus$ | async) == 'success'; else loader\">\r\n                <table class=\"table table-hover mt-1\">\r\n                    <!-- not editing -->\r\n                    <tbody *ngIf=\"!editMode\">\r\n                        <ng-container *ngFor=\"let task of tasks | filter:{ complete: false }\">\r\n                            <tr app-character-task-list-item *ngIf=\"!task.hidden || editMode\" class=\"task-row\"\r\n                                [task]=\"task\" [character]=\"character\"\r\n                                [editMode]=\"editMode\" (onTaskStateChange)=\"onTaskStateChange($event)\"></tr>\r\n                        </ng-container>\r\n                    </tbody>\r\n                    <tbody *ngIf=\"!editMode\" class=\"complete-table\">\r\n                        <ng-container *ngFor=\"let task of tasks | filter:{ complete: true }\">\r\n                            <tr app-character-task-list-item *ngIf=\"!task.hidden || editMode\" class=\"task-row\"\r\n                                [task]=\"task\" [character]=\"character\"\r\n                                [editMode]=\"editMode\"></tr>\r\n                        </ng-container>\r\n                    </tbody>\r\n\r\n                    <!-- editing -->\r\n                    <tbody *ngIf=\"editMode\" [class.dragging]=\"this.draggingIndex\">\r\n                        <ng-container *ngFor=\"let task of tasks; let index = index\">\r\n                                <tr app-character-task-list-item *ngIf=\"!task.hidden || editMode\" class=\"task-row draggable\"\r\n                                    [task]=\"task\" \r\n                                    [character]=\"character\"\r\n                                    [editMode]=\"editMode\"\r\n                                    [draggable]=\"true\"\r\n                                    (dragstart)=\"onDragStart(index)\"\r\n                                    (dragenter)=\"onDragEnter(index)\"\r\n                                    (dragend)=\"onDragEnd()\">\r\n                                </tr>\r\n                            \r\n                        </ng-container>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n        <ng-template #loader>\r\n            <app-loader [size]=\"'150px'\"></app-loader>\r\n        </ng-template>\r\n    </div>\r\n</div>","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { first } from 'rxjs/operators';\r\nimport { Character } from 'src/app/models/Character';\r\nimport { selectAllCharacters, selectCharacter } from 'src/app/state/characters/character.selector';\r\n\r\n@Component({\r\n  selector: 'app-character-tasks',\r\n  templateUrl: './character-tasks.component.html',\r\n  styleUrls: ['./character-tasks.component.scss']\r\n})\r\nexport class CharacterTasksComponent implements OnInit {\r\n\r\n  character$: Observable<Character>;\r\n\r\n  constructor(private store: Store, private activatedRoute: ActivatedRoute, private router: Router) { }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.activatedRoute.params.subscribe(params => {\r\n      let charId = params[\"id\"];\r\n\r\n      if (charId) {\r\n        this.character$ = this.store.select(selectCharacter(charId));\r\n      }\r\n      else {\r\n        //no char id parameter, find first and redirect;\r\n        this.store.select(selectAllCharacters).pipe(first()).subscribe(chars => {\r\n          if (chars?.length > 0) {\r\n            this.router.navigate([\"home\", chars[0]._id])\r\n          }\r\n        });\r\n      }\r\n    })\r\n  }\r\n\r\n}\r\n","<div *ngIf=\"character$ | async as character\">\r\n    <h1 class=\"m-2\"> {{character.name}} </h1>\r\n\r\n    <app-character-task-list [label]=\"'Daily quests'\" [character]=\"character\" [type]=\"'QUEST'\" [repeats]=\"'DAILY'\">\r\n    </app-character-task-list>\r\n\r\n    <app-character-task-list [label]=\"'Daily bosses'\" [character]=\"character\" [type]=\"'BOSS'\" [repeats]=\"'DAILY'\">\r\n    </app-character-task-list>\r\n\r\n    <app-character-task-list [label]=\"'Weekly quests'\" [character]=\"character\" [type]=\"'QUEST'\" [repeats]=\"'WEEKLY'\">\r\n    </app-character-task-list>\r\n\r\n    <app-character-task-list [label]=\"'Weekly bosses'\" [character]=\"character\" [type]=\"'BOSS'\" [repeats]=\"'WEEKLY'\">\r\n    </app-character-task-list>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { Character } from 'src/app/models/Character';\r\nimport { selectAllCharacters, selectCharacterStateStatus } from 'src/app/state/characters/character.selector';\r\n\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n\r\n\r\n  characters$: Observable<Character[]> = this.store.select(selectAllCharacters);\r\n  charactersStatus$: Observable<string> = this.store.select(selectCharacterStateStatus)\r\n\r\n  activeId: String;\r\n\r\n  constructor(private store: Store) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div class=\"container-fluid\" *ngIf=\"(charactersStatus$ | async) == 'success' ; else loader\">\r\n    <div class=\"row\" *ngIf=\"characters$ | async as characters\">\r\n        <div class=\"col-2 sidebar pt-2\">\r\n            <nav>\r\n                <ul ngbNav class=\"nav flex-column nav-pills\">\r\n                    <li *ngFor=\"let character of characters\" ngbNavItem class=\"nav-item\">\r\n                        <a [routerLink]=\"character._id\" [routerLinkActive]=\"['active']\" class=\"nav-link\">{{ character.name }}</a>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n\r\n        <div class=\"col bg-light\">\r\n            <router-outlet></router-outlet>\r\n\r\n            <h3 *ngIf=\"characters?.length == 0\" class=\"m-2\"> No characters registered.</h3>\r\n        </div>\r\n    </div>\r\n</div>\r\n<ng-template #loader>\r\n    <app-loader [size]=\"'150px'\"></app-loader>\r\n</ng-template>","import { Component, Input, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-loader',\r\n  templateUrl: './loader.component.html',\r\n  styleUrls: ['./loader.component.scss']\r\n})\r\nexport class LoaderComponent implements OnInit {\r\n\r\n  @Input() size: string;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div class=\"loader\" [style.width]=\"size\" [style.height]=\"size\"></div>","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from 'src/app/services/auth/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  constructor(private authService: AuthService, private router: Router) { }\r\n\r\n  public loginUrl: string;\r\n\r\n  ngOnInit(): void {\r\n    \r\n    this.authService.fetchLoginUrl()\r\n    .then((url) => {\r\n      this.loginUrl = url;\r\n    });\r\n  }\r\n\r\n  signIn() {\r\n    location.href = this.loginUrl;\r\n  }\r\n}\r\n","<button [disabled]=\"loginUrl == undefined\" (click)=\"signIn()\"> Sign in </button>","import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ModalInfo } from 'src/app/models/Modal';\r\nimport { ModalService } from 'src/app/services/modal/modal.service';\r\n\r\n@Component({\r\n  selector: 'app-modal',\r\n  templateUrl: './modal.component.html',\r\n  styleUrls: ['./modal.component.scss']\r\n})\r\nexport class ModalComponent implements OnInit {\r\n\r\n  @ViewChild('content', { static: false }) modalContent: TemplateRef<void>;\r\n  \r\n  public title: String;\r\n  public contentText: String;\r\n\r\n  constructor(private ngbModal: NgbModal, private modalService: ModalService) { }\r\n\r\n\r\n  ngOnInit(): void {\r\n\r\n    this.modalService.modalEvents.on(\"open\", (info: ModalInfo) => {\r\n\r\n      this.title = info.title;\r\n      this.contentText = info.content;\r\n\r\n      const modalRef = this.ngbModal.open(this.modalContent);\r\n    });\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\n","<ng-template #content let-modal>\r\n    <div class=\"modal-header\">\r\n        <h4 class=\"modal-title\">{{title}}</h4>\r\n        <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"modal.dismiss()\">\r\n            <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n        <p>{{ contentText }}</p>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n        <button ngbAutofocus type=\"button\" class=\"btn btn-outline-dark\" (click)=\"modal.close()\">Close</button>\r\n    </div>\r\n</ng-template>","import { Component, Input, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { TaskRepeats } from 'src/app/enums/task-repeats.enum';\r\nimport { TaskType } from 'src/app/enums/task-type.enum';\r\nimport { Task } from 'src/app/models/Task';\r\nimport { TaskService } from 'src/app/services/task/task.service';\r\nimport { addTask, updateTask } from 'src/app/state/tasks/task.actions';\r\nimport { selectTask } from 'src/app/state/tasks/task.selector';\r\n\r\n\r\n@Component({\r\n  selector: 'app-task-form',\r\n  templateUrl: './task-form.component.html',\r\n  styleUrls: ['./task-form.component.scss']\r\n})\r\nexport class TaskFormComponent implements OnInit {\r\n\r\n  constructor(private router: Router, private activatedRoute: ActivatedRoute, private store: Store) { }\r\n\r\n  @Input() task: Task;\r\n\r\n  taskTypeEnum = TaskType;\r\n  taskRepeatsEnum = TaskRepeats;\r\n\r\n  ngOnInit(): void {\r\n    this.activatedRoute.params.subscribe(async params => {\r\n      let id = params[\"id\"];\r\n      if (id) {\r\n        let task$ = this.store.select(selectTask(id))\r\n\r\n        task$.subscribe((task) => {\r\n          this.task = { ...task };\r\n        })\r\n\r\n      }\r\n      else {\r\n        this.task = new Task();\r\n      }\r\n    });\r\n  }\r\n\r\n  save() {\r\n    if (this.task._id) {\r\n      this.store.dispatch(updateTask({ task: this.task }))\r\n    }\r\n    else {\r\n      this.store.dispatch(addTask({ task: this.task }))\r\n    }\r\n\r\n    this.router.navigate([\"tasks\"]);\r\n  }\r\n}\r\n","<div class=\"container\">\r\n    <form #taskForm=\"ngForm\" (ngSubmit)=\"save()\">\r\n        <div class=\"form-group\">\r\n            <label for=\"name\">Name</label>\r\n            <input class=\"form-control\" type=\"text\" id=\"name\" name=\"name\" placeholder=\"Task name\"\r\n                [(ngModel)]=\"task.name\" required />\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n            <label for=\"type\">Type</label>\r\n            <select class=\"form-control\" [(ngModel)]=\"task.type\" name=\"type\" required>\r\n                <option *ngFor=\"let type of taskTypeEnum | enumToArray\" value=\"{{type.value}}\"\r\n                    [selected]=\"type.value == task.type\"> {{type.name}} </option>\r\n            </select>\r\n        </div>\r\n\r\n        <div class=\"form-group\" *ngIf=\"task.type == taskTypeEnum.Boss\">\r\n            <label for=\"crystalValue\">Crystal value</label>\r\n            <input class=\"form-control\" type=\"number\" id=\"crystalValue\" name=\"crystalValue\" placeholder=\"Crystal value\"\r\n                [(ngModel)]=\"task.crystalValue\" [required]=\"task.type == taskTypeEnum.Boss\" />\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n            <label for=\"type\">Repeats</label>\r\n            <select class=\"form-control\" [(ngModel)]=\"task.repeats\" name=\"repeats\">\r\n                <option *ngFor=\"let repeats of taskRepeatsEnum | enumToArray\" [ngValue]=\"repeats.value\">\r\n                    {{repeats.name}}\r\n                </option>\r\n            </select>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n            <label for=\"image\">Image</label>\r\n            <input class=\"form-control\" type=\"text\" id=\"image\" name=\"image\" placeholder=\"Image path\"\r\n                [(ngModel)]=\"task.image\" required />\r\n        </div>\r\n        \r\n        <div class=\"float-right\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" routerLink=\"/tasks\">Cancel</button>\r\n            <button type=\"submit\" class=\"btn btn-success ml-2\" [disabled]=\"taskForm.form.invalid\"> Save </button>\r\n        </div>\r\n    </form>\r\n</div>","import { Component, Input, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Task } from 'src/app/models/Task';\r\nimport { deleteTask } from 'src/app/state/tasks/task.actions';\r\n\r\n@Component({\r\n  selector: '[app-task-list-item]',\r\n  templateUrl: './task-list-item.component.html',\r\n  styleUrls: ['./task-list-item.component.scss']\r\n})\r\nexport class TaskListItemComponent implements OnInit {\r\n\r\n  @Input() task: Task;\r\n\r\n  constructor(private store: Store) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  async delete(id: String) {\r\n    this.store.dispatch(deleteTask({ id: id }))\r\n  }\r\n}\r\n","<td>\r\n    {{ task.name }}\r\n</td>\r\n<td>\r\n    {{ task.type }}\r\n</td>\r\n<td>\r\n    {{ task.repeats }}\r\n</td>\r\n<td>\r\n    {{ task.default }}\r\n</td>\r\n<td>\r\n    <div *ngIf=\"!task.default\">\r\n        <a [routerLink]=\"['edit',task._id]\">Edit</a> |\r\n        <a class=\"text-danger\" role=\"button\" (click)=\"delete(task._id)\">Delete</a>\r\n    </div>\r\n</td>","import { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { Task } from 'src/app/models/Task';\r\nimport { allTasks, selectTaskStateStatus } from 'src/app/state/tasks/task.selector';\r\n\r\n@Component({\r\n  selector: 'app-tasks',\r\n  templateUrl: './tasks.component.html',\r\n  styleUrls: ['./tasks.component.scss']\r\n})\r\nexport class TasksComponent implements OnInit {\r\n\r\n  tasks$: Observable<Task[]> = this.store.select(allTasks);\r\n  taskStateStatus$: Observable<string> = this.store.select(selectTaskStateStatus);\r\n\r\n  constructor(private store: Store) { }\r\n\r\n  ngOnInit(): void {  }\r\n\r\n  \r\n}\r\n","<div class=\"container\">\r\n\r\n    <button class=\"btn btn-primary bottom-right-floating-button\" routerLink=\"new\">New task</button>\r\n\r\n    <div class=\"d-flex mb-3\">\r\n        <h2>Tasks</h2>    \r\n    </div>\r\n\r\n    <table *ngIf=\"(taskStateStatus$ | async) == 'success'; else loader\" class=\"table table-striped\">\r\n        <thead>\r\n            <tr>\r\n                <th>\r\n                    Task\r\n                </th>\r\n                <th>\r\n                    Type\r\n                </th>\r\n                <th>\r\n                    Repeats\r\n                </th>\r\n                <th>\r\n                    Default\r\n                </th>\r\n                <th>\r\n                    Actions\r\n                </th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr app-task-list-item *ngFor=\"let task of tasks$ | async\" [task]=\"task\"></tr>\r\n        </tbody>\r\n    </table>\r\n\r\n    <ng-template #loader>\r\n        <app-loader [size]=\"'150px'\"></app-loader>\r\n    </ng-template>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { ToastService } from 'src/app/services/toast/toast.service';\r\n\r\n@Component({\r\n  selector: 'app-toast',\r\n  templateUrl: './toast.component.html',\r\n  styleUrls: ['./toast.component.scss']\r\n})\r\nexport class ToastComponent implements OnInit {\r\n\r\n  constructor(public toastService: ToastService) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<ngb-toast *ngFor=\"let toast of toastService.toasts\" [header]=\"toast.header\" [autohide]=\"true\"\r\n    [delay]=\"toast.delay || 5000\" (hide)=\"toastService.remove(toast)\">{{toast.body}}</ngb-toast>","export enum TaskRepeats {\r\n  Daily = \"DAILY\",\r\n  Weelky = \"WEEKLY\",\r\n}","export enum TaskType {\r\n  Boss = \"BOSS\",\r\n  Quest = \"QUEST\",\r\n}","import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router, ActivatedRoute } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../services/auth/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticationGuard implements CanActivate {\r\n\r\n  constructor(private authService: AuthService, private router: Router, private route: ActivatedRoute) { }\r\n\r\n  async canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot): Promise<boolean> {\r\n\r\n    let code = route.queryParams.code;\r\n\r\n    if (code) {\r\n      await this.authService.getToken(code);\r\n    }\r\n\r\n    let authenticatedUser = await this.authService.getAuthenticatedUser()\r\n\r\n    if (!authenticatedUser) {\r\n      this.router.navigate(['login']);\r\n      return false;\r\n    }\r\n\r\n    if(code)\r\n      this.router.navigate(['/']);\r\n\r\n    return true;\r\n  }\r\n\r\n}\r\n","export class AuthError extends Error {\r\n    constructor(...params) {\r\n        // Pass remaining arguments (including vendor specific ones) to parent constructor\r\n        super(...params)\r\n\r\n        this.name = 'AuthError'\r\n\r\n    }\r\n}","export class Character {\r\n\r\n    public _id: String;\r\n\r\n    public name: String;\r\n\r\n    public configuration: {\r\n        hidden: Boolean,\r\n        tasks: {\r\n            task: String,\r\n            hidden: Boolean,\r\n            priority: number,\r\n        }[]\r\n    }\r\n}","export class Task {\r\n    public _id: String;\r\n    public type: String;\r\n    public repeats: String;\r\n    public name: String;\r\n    public image: String;\r\n    public crystalValue: Number;\r\n    public default: Boolean;    \r\n\r\n    public hidden: Boolean;\r\n    public priority: Number;\r\n    public complete: Boolean;\r\n}","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'enumToArray'\r\n})\r\nexport class EnumToArrayPipe implements PipeTransform {\r\n\r\n  transform(value: unknown, ...args: unknown[]): unknown {\r\n    return Object.keys(value).map(o => { return { name: o, value: value[o] } });\r\n  }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'filter'\r\n})\r\nexport class FilterPipe implements PipeTransform {\r\n\r\n  transform(items: any, filter: any): any {\r\n    if (filter && Array.isArray(items)) {\r\n        let filterKeys = Object.keys(filter);\r\n        return items.filter(item =>\r\n            filterKeys.reduce((memo, keyName) =>\r\n                (memo && new RegExp(filter[keyName], 'gi').test(item[keyName])) || filter[keyName] === \"\", true));\r\n    } else {\r\n        return items;\r\n    }\r\n  }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { orderBy } from 'lodash';\r\n\r\n@Pipe({\r\n  name: 'sort'\r\n})\r\nexport class SortPipe implements PipeTransform {\r\n\r\n  transform(value: any[], order, column: string = ''): any[] {\r\n    if (!value || order === '' || !order) { return value; } // no array\r\n    if (value.length <= 1) { return value; } // array with only one item\r\n    if (!column || column === '') {\r\n      if (order === 'asc') { return value.sort() }\r\n      else { return value.sort().reverse(); }\r\n    } // sort 1d array\r\n    return orderBy(value, [column], [order]);\r\n  }\r\n\r\n}\r\n","import { EventEmitter, Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { User } from 'src/app/models/User';\r\n\r\nimport { environment } from 'src/environments/environment';\r\nimport { FetchService } from '../fetch/fetch.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n  public authenticatedUser: User;\r\n  public authenticatedUserChanged = new EventEmitter<User>();\r\n\r\n  constructor(private router: Router, private fetchService: FetchService) {\r\n\r\n  }\r\n\r\n  public async getAuthenticatedUser(): Promise<boolean> {\r\n\r\n    let response = await this.fetchService.get(`user`);\r\n\r\n    let isOk = response.status == 200;\r\n\r\n    if (isOk) {\r\n      this.authenticatedUser = await response.json();\r\n      this.authenticatedUserChanged.emit(this.authenticatedUser);\r\n    }\r\n\r\n    return isOk\r\n  }\r\n\r\n  public async getToken(code: string): Promise<boolean> {\r\n\r\n    let body = {\r\n      code: code,\r\n      redirect: environment.redirectUrl\r\n    }\r\n\r\n    let response = await this.fetchService.post('auth/getToken', body);\r\n\r\n    return (response && response.status == 200);\r\n\r\n  }\r\n\r\n  async fetchLoginUrl(): Promise<string> {\r\n\r\n    let response = await this.fetchService.get(`auth/authUrl?redirect=${environment.redirectUrl}`);\r\n\r\n    let url = await response.text();\r\n\r\n    return url;\r\n\r\n  }\r\n\r\n  async signIn() {\r\n    let url = await this.fetchLoginUrl();\r\n    location.href = url;\r\n  }\r\n\r\n  async logout() {\r\n    location.href = environment.apiEndpoint + \"/auth/logout?redirect=\" + location.href\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Character } from 'src/app/models/Character';\r\nimport { FetchService } from '../fetch/fetch.service';\r\nimport * as _ from 'lodash';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CharacterService {\r\n\r\n    constructor(private fetchService: FetchService) {}\r\n\r\n    async getAll(): Promise<Character[]> {\r\n        let response = await this.fetchService.get(\"characters\");\r\n        return await response.json();\r\n    }\r\n\r\n    async create(character: Character) {\r\n        await this.fetchService.post(\"characters\", character);\r\n    }\r\n\r\n    async update(character: Character) {\r\n        await this.fetchService.put(\"characters\", character);\r\n    }\r\n\r\n    async delete(id: String) {\r\n        await this.fetchService.delete(\"characters\", { id: id });\r\n    }\r\n}\r\n","import { ErrorHandler, Injectable, Injector, NgZone } from '@angular/core';\r\nimport { AuthError } from 'src/app/models/AuthError';\r\nimport { AuthService } from '../auth/auth.service';\r\nimport { ModalService } from '../modal/modal.service';\r\nimport { ToastService } from '../toast/toast.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ErrorHandlerService implements ErrorHandler {\r\n\r\n\r\n\r\n  constructor(private injector: Injector) { }\r\n\r\n  handleError(error): void {\r\n\r\n    const toastService = this.injector.get(ToastService);\r\n    const authService = this.injector.get(AuthService);\r\n    const zone = this.injector.get(NgZone);\r\n\r\n    zone.run(() => {\r\n      if (error.rejection instanceof AuthError) {\r\n        authService.signIn();\r\n        return;\r\n      }\r\n      toastService.show(\"ERROR\", error.message);\r\n    });\r\n\r\n    console.error(error);\r\n\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { AuthError } from 'src/app/models/AuthError';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FetchService {\r\n\r\n  private apiUrl: string = environment.apiEndpoint;\r\n\r\n  constructor() { }\r\n\r\n  public async get(url: string): Promise<Response> {\r\n    return this.fetch(`${this.apiUrl}/${url}`, {\r\n      credentials: 'include'\r\n    });\r\n  }\r\n\r\n  public async post(url: string, body: object): Promise<Response> {\r\n    return this.sendRequest(url,body, \"POST\");\r\n  }\r\n  \r\n  public async put(url: string, body: object): Promise<Response> {\r\n    return this.sendRequest(url,body, \"PUT\");\r\n  }\r\n\r\n  public async delete(url: string, body: object): Promise<Response> {\r\n    return this.sendRequest(url,body, \"DELETE\");\r\n  }\r\n\r\n  public async sendRequest(url: string, body: object, method: string): Promise<Response> {\r\n\r\n    return this.fetch(`${this.apiUrl}/${url}`, {\r\n      method: method,\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      credentials: 'include',\r\n      body: JSON.stringify(body)\r\n    });\r\n  }\r\n\r\n\r\n  private fetch(url, options): Promise<Response> {\r\n    return fetch(url, options)\r\n      .then(this.handleErrors)\r\n  }\r\n\r\n  private async handleErrors(response: Response): Promise<Response> {\r\n    if (response.status == 401) {\r\n      throw new AuthError(\"Authentication error\");\r\n    }\r\n    else if(!response.ok){\r\n      let text = await response.text();\r\n      throw new Error(text);\r\n    }\r\n    return response;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { EventEmitter } from 'events';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ModalService {\r\n\r\n  public modalEvents = new EventEmitter();\r\n\r\n  constructor() { }\r\n\r\n  public show(title: string, content: string) {\r\n    this.modalEvents.emit(\"open\", { title: title, content: content });\r\n  }\r\n}\r\n","import { EventEmitter, Injectable } from '@angular/core';\r\nimport { CompletedTask } from 'src/app/models/CoompletedTask';\r\nimport { Task } from 'src/app/models/Task';\r\nimport { FetchService } from '../fetch/fetch.service';\r\nimport * as _ from 'lodash';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TaskService {\r\n\r\n  constructor(private fetchService: FetchService) {\r\n  }\r\n\r\n  public async getTasks(): Promise<Task[]> {\r\n    let response = await this.fetchService.get(`tasks`);\r\n    return await response.json();\r\n  }\r\n\r\n  public async getCompletedTasks(): Promise<CompletedTask[]> {\r\n    let response = await this.fetchService.get(`tasks/completed/${new Date().getTime()}`);\r\n    return await response.json();\r\n  }\r\n\r\n  public async changeTaskState(characterId: String, taskId: String, completed: Boolean): Promise<void> {\r\n\r\n    await this.fetchService.post('tasks/change-state',\r\n      {\r\n        taskId: taskId,\r\n        characterId: characterId,\r\n        completed: completed,\r\n        date: new Date().getTime()\r\n      });\r\n  }\r\n\r\n  public async getTask(id: String): Promise<Task> {\r\n\r\n    let response = await this.fetchService.get(`tasks/${id}`);\r\n    return await response.json();\r\n  }\r\n\r\n  async create(task: Task): Promise<void> {\r\n    await this.fetchService.post('tasks', task);\r\n  }\r\n\r\n  async update(task: Task): Promise<void> {\r\n    await this.fetchService.put('tasks', task);\r\n  }\r\n\r\n  async delete(id: String): Promise<void> {\r\n    await this.fetchService.delete(\"tasks\", { id: id });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ToastService {\r\n  toasts: any[] = [];\r\n\r\n  show(header: string, body: string) {\r\n    this.toasts.push({ header, body });\r\n  }\r\n\r\n  remove(toast) {\r\n    this.toasts = this.toasts.filter(t => t != toast);\r\n  }\r\n}","import { createAction, props } from '@ngrx/store';\r\nimport { Character } from 'src/app/models/Character';\r\nimport { Task } from 'src/app/models/Task';\r\n\r\nexport const addCharacter = createAction(\r\n  '[Character Page] Add Character',\r\n  props<{ character: Character }>()\r\n);\r\n\r\nexport const updateCharacter = createAction(\r\n  '[Character Page] Update Character',\r\n  props<{ character: Character }>()\r\n);\r\n\r\nexport const deleteCharacter = createAction(\r\n  '[Character Page] Delete Character',\r\n  props<{ id: String }>()\r\n);\r\n\r\nexport const loadCharacters = createAction('[Character API] Load Characters');\r\n\r\nexport const loadCharactersSuccess = createAction(\r\n  '[Character API] Character Load Success',\r\n  props<{ characters: Character[] }>()\r\n);\r\n\r\nexport const apiFailure = createAction(\r\n  '[Characters API] API Failure',\r\n  props<{ error: string }>()\r\n);\r\n\r\n\r\nexport const hideTask = createAction(\r\n  '[Home] hide task',\r\n  props<{ characterId: String, taskId: String, hidden: Boolean }>()\r\n);\r\n\r\nexport const updateTaskPriorities = createAction(\r\n  '[Home] update task priorities',\r\n  props<{ characterId: String, tasks: Task[] }>()\r\n);","import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { of, from } from 'rxjs';\r\nimport { switchMap, map, catchError, withLatestFrom } from 'rxjs/operators';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../app.state';\r\nimport { CharacterService } from 'src/app/services/character/character.service';\r\nimport { addCharacter, deleteCharacter, loadCharacters, apiFailure, loadCharactersSuccess, updateCharacter, hideTask, updateTaskPriorities } from './character.actions';\r\nimport { selectCharacter } from './character.selector';\r\n\r\n@Injectable()\r\nexport class CharacterEffects {\r\n    constructor(\r\n        private actions$: Actions,\r\n        private store: Store<AppState>,\r\n        private characterService: CharacterService\r\n    ) { }\r\n\r\n    // Run this code when a loadCharacters action is dispatched\r\n    loadCharacters$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(loadCharacters),\r\n            switchMap(() =>\r\n                // Call the getCharacters method, convert it to an observable\r\n                from(this.characterService.getAll()).pipe(\r\n                    map((characters) => loadCharactersSuccess({ characters: characters })),\r\n                    catchError((error) => of(apiFailure({ error })))\r\n                )\r\n            )\r\n        )\r\n    );\r\n\r\n    // Run this code when the addCharacter action is dispatched\r\n    saveCharacter$ = createEffect(\r\n        () =>\r\n            this.actions$.pipe(\r\n                ofType(addCharacter),\r\n                switchMap(action =>\r\n                    from(this.characterService.create(action.character)).pipe(\r\n                        map(() => loadCharacters()),\r\n                        catchError((error) => of(apiFailure({ error })))\r\n                    )\r\n                )\r\n            )\r\n    );\r\n\r\n    // Run this code when the updateCharacter action is dispatched\r\n    updateCharacter$ = createEffect(\r\n        () =>\r\n            this.actions$.pipe(\r\n                ofType(updateCharacter),\r\n                switchMap(action =>\r\n                    from(this.characterService.update(action.character)).pipe(\r\n                        map(() => loadCharacters()),\r\n                        catchError((error) => of(apiFailure({ error })))\r\n                    )\r\n                )\r\n            )\r\n    );\r\n\r\n    // Run this code when the updateCharacter action is dispatched\r\n    deleteCharacter$ = createEffect(\r\n        () =>\r\n            this.actions$.pipe(\r\n                ofType(deleteCharacter),\r\n                switchMap(action =>\r\n                    from(this.characterService.delete(action.id)).pipe(\r\n                        map(() => loadCharacters()),\r\n                        catchError((error) => of(apiFailure({ error })))\r\n                    )\r\n                )\r\n            )\r\n    );\r\n\r\n    // Run this code when the hideTask action is dispatched\r\n    configurationChanged$ = createEffect(\r\n        () =>\r\n            this.actions$.pipe(\r\n                ofType(hideTask, updateTaskPriorities),\r\n                switchMap(action =>\r\n                    of(action).pipe(\r\n                        withLatestFrom(this.store.select(selectCharacter(action.characterId))),\r\n                        switchMap(([action,latest]) => from(this.characterService.update(latest)))\r\n                    )\r\n                ),\r\n            ),\r\n        { dispatch: false }\r\n    );\r\n}","import { createReducer, on } from '@ngrx/store';\r\nimport { Character } from 'src/app/models/Character';\r\nimport {\r\n  addCharacter,\r\n  deleteCharacter,\r\n  loadCharacters,\r\n  loadCharactersSuccess,\r\n  apiFailure,\r\n  updateCharacter,\r\n  hideTask,\r\n  updateTaskPriorities\r\n} from './character.actions';\r\n\r\nexport interface CharacterState {\r\n  characters: Character[];\r\n  error: String;\r\n  status: 'pending' | 'loading' | 'error' | 'success';\r\n}\r\n\r\nexport const initialState: CharacterState = {\r\n  characters: [],\r\n  error: null,\r\n  status: 'pending',\r\n};\r\n\r\nexport const characterReducer = createReducer(\r\n\r\n  // Supply the initial state\r\n  initialState,\r\n\r\n  // Add the new character to the characters array\r\n  on(addCharacter, (state) => ({ ...state, status: 'loading' })),\r\n\r\n  on(updateCharacter, (state) => ({ ...state, status: 'loading' })),\r\n\r\n  on(deleteCharacter, (state) => ({ ...state, status: 'loading' })),\r\n\r\n  on(loadCharacters, (state) => ({ ...state, status: 'loading' })),\r\n\r\n  // Handle successfully loaded characters\r\n  on(loadCharactersSuccess, (state, { characters }) => ({\r\n    ...state,\r\n    characters: characters,\r\n    error: null,\r\n    status: 'success',\r\n  })),\r\n\r\n  on(apiFailure, (state, { error }) => ({\r\n    ...state,\r\n    error: error,\r\n    status: 'error',\r\n  })),\r\n\r\n  on(hideTask, (state, { characterId, taskId, hidden }) => {\r\n\r\n    let character: Character = state.characters.find(char => char._id == characterId);\r\n\r\n    let characterClone: Character = { ...character };\r\n    characterClone.configuration = { ...character.configuration };\r\n    characterClone.configuration.tasks = [...characterClone.configuration.tasks];\r\n\r\n    if(characterClone.configuration.tasks.some(taskConfig => taskConfig.task == taskId))\r\n    {\r\n      characterClone.configuration.tasks = characterClone.configuration.tasks.map(taskConfig => taskConfig.task == taskId ? { ...taskConfig, hidden: hidden } : taskConfig);\r\n    }\r\n    else{\r\n      characterClone.configuration.tasks.push({\r\n        hidden: hidden,\r\n        task: taskId,\r\n        priority: null\r\n      });\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      characters: state.characters.map(c => c._id == character._id ? characterClone : c)\r\n    };\r\n\r\n  }),\r\n\r\n  on(updateTaskPriorities, (state, { characterId, tasks }) => {\r\n\r\n    let character: Character = state.characters.find(char => char._id == characterId);\r\n\r\n    let characterClone: Character = { ...character };\r\n    characterClone.configuration = { ...character.configuration };\r\n    characterClone.configuration.tasks = [...characterClone.configuration.tasks];\r\n\r\n    tasks.map((task, newPriority )=> {\r\n      if(characterClone.configuration.tasks.some(config => config.task == task._id))\r\n      {\r\n        characterClone.configuration.tasks = characterClone.configuration.tasks.map(config => config.task == task._id ? { ...config, priority: newPriority } : config);\r\n      }\r\n      else\r\n      {\r\n        characterClone.configuration.tasks.push({\r\n          hidden: false,\r\n          task: task._id,\r\n          priority: newPriority\r\n        });\r\n      }\r\n    });\r\n\r\n    return {\r\n      ...state,\r\n      characters: state.characters.map(c => c._id == character._id ? characterClone : c)\r\n    };\r\n  })\r\n\r\n);","import { createSelector } from '@ngrx/store';\r\nimport { AppState } from '../app.state';\r\nimport { CharacterState } from './character.reducer';\r\n\r\n\r\nexport const charactersStateSelector = (state: AppState) => state.characters;\r\n\r\nexport const selectAllCharacters = createSelector(\r\n    charactersStateSelector,\r\n    (state: CharacterState) => state.characters\r\n);\r\n\r\nexport const selectCharacter = (id: String) => createSelector(\r\n    charactersStateSelector,\r\n    (state: CharacterState) => state.characters.find(character => character._id == id)\r\n)\r\n\r\nexport const selectCharacterStateStatus = createSelector(\r\n    charactersStateSelector,\r\n    (state: CharacterState) => state.status\r\n)","import { createAction, props } from '@ngrx/store';\r\nimport { CompletedTask } from 'src/app/models/CoompletedTask';\r\n\r\nexport const setComplete = createAction(\r\n  '[Completed Task] Set complete',\r\n  props<{ characterId: String, taskId: String }>()\r\n);\r\n\r\nexport const setIncomplete = createAction(\r\n  '[Completed Task] Set incomplete',\r\n  props<{ characterId: String, taskId: String }>()\r\n);\r\n\r\nexport const loadCompletedTasks = createAction(\r\n  '[Completed Task API] Load'\r\n)\r\n\r\nexport const loadCompletedTasksSuccess = createAction(\r\n  '[Completed Task API] Load success',\r\n  props<{ completedTasks: CompletedTask[] }>()\r\n)\r\n\r\nexport const loadCompletedTasksFailure = createAction(\r\n  '[Completed Task API] Load failure',\r\n  props<{ error: String }>()\r\n)","import { createReducer, on } from '@ngrx/store';\r\nimport { CompletedTask } from 'src/app/models/CoompletedTask';\r\nimport { loadCompletedTasks, loadCompletedTasksFailure, loadCompletedTasksSuccess, setComplete, setIncomplete } from './completed-task.actions';\r\n\r\nexport interface CompletedTaskState {\r\n  completedTasks: CompletedTask[];\r\n  error: String;\r\n  status: 'pending' | 'loading' | 'error' | 'success';\r\n}\r\n\r\nexport const initialState: CompletedTaskState = {\r\n  completedTasks: [],\r\n  error: null,\r\n  status: 'pending',\r\n};\r\n\r\nexport const completedTaskReducer = createReducer(\r\n  initialState,\r\n\r\n  on(setComplete, (state, { characterId, taskId }) => {\r\n\r\n    let completedTask: CompletedTask = {\r\n      _id: \"\",\r\n      task: taskId,\r\n      character: characterId,\r\n      date: new Date()\r\n    }\r\n\r\n    return {\r\n      ...state,\r\n      completedTasks: [...state.completedTasks, completedTask],\r\n    }\r\n  }),\r\n\r\n  on(setIncomplete, (state, { characterId, taskId }) => ({\r\n    ...state,\r\n    completedTasks: state.completedTasks.filter(ct => !(ct.character == characterId && ct.task == taskId))\r\n  })),\r\n\r\n  on(loadCompletedTasks, (state) => ({ ...state, status: 'loading' })),\r\n\r\n  on(loadCompletedTasksSuccess, (state, { completedTasks }) => ({\r\n    ...state,\r\n    completedTasks: completedTasks,\r\n    error: null,\r\n    status: 'success',\r\n  })),\r\n\r\n  //TODO: make default handler?\r\n  on(loadCompletedTasksFailure, (state, { error }) => ({\r\n    ...state,\r\n    error: error,\r\n    status: 'error',\r\n  }))\r\n);","import { createSelector } from '@ngrx/store';\r\nimport { AppState } from '../app.state';\r\nimport { CompletedTaskState } from './completed-task.reducer';\r\n\r\n\r\nexport const completedTasksStateSelector = (state: AppState) => state.completedTasks;\r\n\r\nexport const selectCharacterCompletedTasks = (characterId: String) => createSelector(\r\n    completedTasksStateSelector,\r\n    (state: CompletedTaskState) => {\r\n        return state.completedTasks.filter(ct => ct.character == characterId)\r\n    }\r\n);\r\n\r\nexport const selectCompletedTaskStateStatus = createSelector(\r\n    completedTasksStateSelector,\r\n    (state: CompletedTaskState) => state.status\r\n)","import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { from, of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { TaskService } from 'src/app/services/task/task.service';\r\nimport { AppState } from '../app.state';\r\nimport { loadCompletedTasks, loadCompletedTasksFailure, loadCompletedTasksSuccess, setComplete, setIncomplete } from './completed-task.actions';\r\n\r\n@Injectable()\r\nexport class CompletedTaskEffects {\r\n    constructor(\r\n        private actions$: Actions,\r\n        private store: Store<AppState>,\r\n        private taskService: TaskService\r\n    ) { }\r\n\r\n    setIncomplete$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(setIncomplete),\r\n            map((action) => this.taskService.changeTaskState(action.characterId,action.taskId, false))\r\n        ),\r\n        {\r\n            dispatch: false\r\n        }\r\n    );\r\n    \r\n    setComplete$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(setComplete),\r\n            map((action) => this.taskService.changeTaskState(action.characterId,action.taskId, true))\r\n        ),\r\n        {\r\n            dispatch: false\r\n        }\r\n    );\r\n\r\n    loadCompletedTasks$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(loadCompletedTasks),\r\n            switchMap(() =>\r\n                from(this.taskService.getCompletedTasks()).pipe(\r\n                    map((completedTasks) => loadCompletedTasksSuccess({ completedTasks })),\r\n                    catchError((error) => of(loadCompletedTasksFailure({ error })))\r\n                )\r\n            )\r\n        )\r\n    );\r\n}","import { createAction, props } from '@ngrx/store';\r\nimport { Task } from 'src/app/models/Task';\r\n\r\n\r\n//TODO: Export single object\r\nexport const addTask = createAction(\r\n  '[Task Page] Add Task',\r\n  props<{ task: Task }>()\r\n);\r\n\r\nexport const updateTask = createAction(\r\n  '[Task Page] Update Task',\r\n  props<{ task: Task }>()\r\n);\r\n\r\nexport const deleteTask = createAction(\r\n  '[Task Page] Delete Task',\r\n  props<{ id: String }>()\r\n);\r\n\r\nexport const loadTasks = createAction('[Task Page] Load Tasks');\r\n\r\nexport const loadTasksSuccess = createAction(\r\n  '[Task API] Task Load Success',\r\n  props<{ tasks: Task[] }>()\r\n);\r\n\r\nexport const apiFailure = createAction(\r\n  '[Tasks API] Tasks API Failure',\r\n  props<{ error: string }>()\r\n);","import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { of, from } from 'rxjs';\r\nimport { switchMap, map, catchError } from 'rxjs/operators';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../app.state';\r\nimport { addTask, deleteTask, loadTasks, apiFailure, loadTasksSuccess, updateTask } from './task.actions';\r\nimport { TaskService } from 'src/app/services/task/task.service';\r\n\r\n@Injectable()\r\nexport class TaskEffects {\r\n    constructor(\r\n        private actions$: Actions,\r\n        private store: Store<AppState>,\r\n        private taskService: TaskService\r\n    ) { }\r\n\r\n    loadTasks$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(loadTasks),\r\n            switchMap(() =>\r\n                from(this.taskService.getTasks()).pipe(\r\n                    // Take the returned value and return a new success action containing the characters\r\n                    map((tasks) => loadTasksSuccess({ tasks: tasks })),\r\n                    // Or... if it errors return a new failure action containing the error\r\n                    catchError((error) => of(apiFailure({ error })))\r\n                )\r\n            )\r\n        )\r\n    );\r\n\r\n    saveTask$ = createEffect(\r\n        () =>\r\n            this.actions$.pipe(\r\n                ofType(addTask),\r\n                switchMap(action =>\r\n                    from(this.taskService.create(action.task)).pipe(\r\n                        map(() => loadTasks()),\r\n                        catchError((error) => of(apiFailure({ error })))\r\n                    )\r\n                )\r\n            )\r\n    );\r\n\r\n    updateTask$ = createEffect(\r\n        () =>\r\n            this.actions$.pipe(\r\n                ofType(updateTask),\r\n                switchMap(action =>\r\n                    from(this.taskService.update(action.task)).pipe(\r\n                        map(() => loadTasks()),\r\n                        catchError((error) => of(apiFailure({ error })))\r\n                    )\r\n                )\r\n            )\r\n    );\r\n\r\n    deleteTask$ = createEffect(\r\n        () =>\r\n            this.actions$.pipe(\r\n                ofType(deleteTask),\r\n                switchMap(action =>\r\n                    from(this.taskService.delete(action.id)).pipe(\r\n                        map(() => loadTasks()),\r\n                        catchError((error) => of(apiFailure({ error })))\r\n                    )\r\n                )\r\n            )\r\n    );\r\n\r\n}","import { createReducer, on } from '@ngrx/store';\r\nimport { Task } from 'src/app/models/Task';\r\nimport { addTask, deleteTask, loadTasks, loadTasksSuccess, apiFailure, updateTask } from './task.actions';\r\n\r\nexport interface TaskState {\r\n  tasks: Task[];\r\n  error: string;\r\n  status: 'pending' | 'loading' | 'error' | 'success';\r\n}\r\n\r\nexport const initialState: TaskState = {\r\n  tasks: [],\r\n  error: null,\r\n  status: 'pending',\r\n};\r\n\r\nexport const taskReducer = createReducer(\r\n  \r\n    // Supply the initial state\r\n  initialState,\r\n  \r\n  on(addTask, (state) => ({ ...state, status: 'loading' })),\r\n  \r\n  on(updateTask, (state) => ({ ...state, status: 'loading' })),\r\n\r\n  on(deleteTask, (state) => ({ ...state, status: 'loading' })),\r\n  \r\n  on(loadTasks, (state) => ({ ...state, status: 'loading' })),\r\n\r\n  // Handle successfully loaded tasks\r\n  on(loadTasksSuccess, (state, { tasks }) => ({\r\n    ...state,\r\n    tasks: tasks,\r\n    error: null,\r\n    status: 'success',\r\n  })),\r\n\r\n  // Handle tasks load failure\r\n  on(apiFailure, (state, { error }) => ({\r\n    ...state,\r\n    error: error,\r\n    status: 'error',\r\n  })),\r\n\r\n  \r\n  \r\n);","import { createSelector } from '@ngrx/store';\r\nimport { Character } from 'src/app/models/Character';\r\nimport { CompletedTask } from 'src/app/models/CoompletedTask';\r\nimport { AppState } from '../app.state';\r\nimport { selectCharacter } from '../characters/character.selector';\r\nimport { selectCharacterCompletedTasks } from '../completedTasks/completed-task.selector';\r\nimport { TaskState } from './task.reducer';\r\nimport * as _ from 'lodash';\r\n\r\nexport const tasksStateSelector = (state: AppState) => state.tasks;\r\n\r\nexport const allTasks = createSelector(\r\n    tasksStateSelector,\r\n    (state: TaskState) => state.tasks\r\n);\r\n\r\nexport const selectCharacterTasks = (characterId: String, type: String, repeats: String) => createSelector(\r\n    tasksStateSelector,\r\n    selectCharacterCompletedTasks(characterId),\r\n    selectCharacter(characterId),\r\n    (state: TaskState, completedTasks: CompletedTask[], character: Character) => {\r\n\r\n        let tasks = state.tasks\r\n            .filter(task => task.type == type && task.repeats == repeats)\r\n            .map(task => {\r\n                task = { ...task }\r\n                task.hidden = character?.configuration?.tasks.some(t => t.task == task._id && t.hidden);\r\n                task.priority = character?.configuration?.tasks.find(t => t.task == task._id)?.priority;\r\n                task.complete = completedTasks?.some(completed => completed.task == task._id);\r\n                return task;\r\n            });\r\n\r\n        //Order by priority\r\n        return _.orderBy(tasks, ['priority'], ['asc']);;\r\n    }\r\n);\r\n\r\nexport const selectTask = (id: String) => createSelector(\r\n    tasksStateSelector,\r\n    (state: TaskState) => state.tasks.find(task => task._id == id)\r\n)\r\n\r\nexport const selectTaskStateStatus = createSelector(\r\n    tasksStateSelector,\r\n    (state: TaskState) => state.status\r\n)","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { HomeComponent } from '../components/home/home.component';\r\nimport { LoginComponent } from '../components/login/login.component';\r\nimport { AuthenticationGuard } from '../guards/authentication.guard';\r\nimport { ApplicationComponent } from '../components/application.component';\r\nimport { TasksComponent } from '../components/tasks/tasks.component';\r\nimport { CharactersComponent } from '../components/characters/characters.component';\r\nimport { TaskFormComponent } from '../components/tasks/task-form/task-form.component';\r\nimport { CharacterFormComponent } from '../components/characters/character-form/character-form.component';\r\nimport { CharacterTasksComponent } from '../components/home/character-tasks/character-tasks.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: 'login',\r\n        component: LoginComponent\r\n    },\r\n    {\r\n        path: '',\r\n        canActivate: [AuthenticationGuard],\r\n        component: ApplicationComponent,\r\n        children: [\r\n            {\r\n                path: '',\r\n                redirectTo: 'home',\r\n                pathMatch: 'full'\r\n            },\r\n            {\r\n                path: 'home',\r\n                component: HomeComponent,\r\n                children:[\r\n                    {\r\n                        path: ':id',\r\n                        component: CharacterTasksComponent\r\n                    },\r\n                    {\r\n                        path: '',\r\n                        pathMatch:\"full\",\r\n                        component: CharacterTasksComponent\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                path: 'tasks',\r\n                children: [\r\n                    {\r\n                        path: 'new',\r\n                        component: TaskFormComponent\r\n                    },\r\n                    {\r\n                        path: 'edit/:id',\r\n                        component: TaskFormComponent\r\n                    },\r\n                    {\r\n                        path: '',\r\n                        component: TasksComponent\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                path: 'characters',\r\n                children: [\r\n                    {\r\n                        path: 'new',\r\n                        component: CharacterFormComponent\r\n                    },\r\n                    {\r\n                        path: 'edit/:id',\r\n                        component: CharacterFormComponent\r\n                    },\r\n                    {\r\n                        path: '',\r\n                        component: CharactersComponent\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forRoot(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  //apiEndpoint: 'http://localhost:5001',\r\n  apiEndpoint: 'https://maple-check-api-staging.herokuapp.com',\r\n  redirectUrl: 'http://localhost:4200'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"names":["Character","addCharacter","updateCharacter","selectCharacter","i0","CharacterFormComponent","constructor","activatedRoute","router","store","ngOnInit","params","subscribe","id","console","log","editCharacter$","select","char","character","save","_id","dispatch","navigate","selectors","decls","vars","consts","template","_r1","deleteCharacter","CharacterListItemComponent","delete","characterId","inputs","attrs","ctx","selectCharacterStateStatus","selectAllCharacters","CharactersComponent","hideTask","setComplete","setIncomplete","CharacterTaskListItemComponent","toggleComplete","task","complete","taskId","toggleHiddenState","hidden","editMode","arrayMove","updateTaskPriorities","selectCompletedTaskStateStatus","selectCharacterTasks","selectTaskStateStatus","ctx_r17","ctx_r23","ctx_r28","CharacterTaskListComponent","ngOnChanges","changes","tasks$","type","repeats","tasks","toggleEditMode","onDragStart","fromIndex","draggingIndex","onDragEnter","toIndex","onDragEnd","undefined","label","features","_r5","first","character_r1","CharacterTasksComponent","charId","character$","pipe","chars","length","HomeComponent","TaskRepeats","TaskType","Task","addTask","updateTask","selectTask","ctx_r2","TaskFormComponent","task$","deleteTask","TaskListItemComponent","allTasks","TasksComponent","AuthenticationGuard","authService","route","canActivate","state","code","queryParams","getToken","authenticatedUser","getAuthenticatedUser","factory","providedIn","EventEmitter","environment","AuthService","fetchService","response","get","isOk","status","json","authenticatedUserChanged","emit","body","redirect","redirectUrl","post","fetchLoginUrl","url","text","signIn","location","href","logout","apiEndpoint","CharacterService","getAll","create","update","put","AuthError","FetchService","fetch","apiUrl","credentials","sendRequest","method","headers","JSON","stringify","options","then","handleErrors","ok","Error","TaskService","getTasks","getCompletedTasks","Date","getTime","changeTaskState","completed","date","getTask"],"sourceRoot":"webpack:///"}